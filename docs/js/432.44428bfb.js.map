{"version":3,"file":"js/432.44428bfb.js","mappings":"oJAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAmB,UAAZP,EAAIQ,KAAkBC,WAAW,sBAAsB,CAACP,EAAG,MAAM,CAACQ,YAAY,kBAAkB,CAACV,EAAIW,GAAGX,EAAIY,GAAGZ,EAAIa,aAAaX,EAAG,MAAM,CAACF,EAAIW,GAAG,OAAOX,EAAIY,GAAgB,QAAbZ,EAAIc,MAAkB,EAAIC,SAASf,EAAIgB,GAAGC,WAAW,SAASf,EAAG,QAAQ,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAmB,QAAZP,EAAIQ,KAAgBC,WAAW,mBAAmBS,IAAI,QAAQC,MAAM,CAAC,IAAMnB,EAAIoB,IAAI,SAAW,IAAIC,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAIuB,aAAa,KAAKrB,EAAG,aAAa,CAACiB,MAAM,CAAC,mBAAmB,YAAYjB,EAAG,SAAS,CAACQ,YAAY,wBAAwB,CAACR,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,QAAbP,EAAIc,MAAiBL,WAAW,oBAAoBU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAIwB,eAAe,IAAI,CAACxB,EAAIW,GAAG,UAAUT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,WAAbP,EAAIc,MAAoBL,WAAW,uBAAuBU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAIyB,eAAe,IAAI,CAACzB,EAAIW,GAAG,UAAUT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,SAAbP,EAAIc,MAAkBL,WAAW,qBAAqBU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAI0B,gBAAgB,IAAI,CAAC1B,EAAIW,GAAG,UAAUT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,WAAbP,EAAIc,OAAmC,SAAbd,EAAIc,MAAkBL,WAAW,2CAA2CU,MAAM,CAAC,MAAQ,GAAG,KAAO,UAAUE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAI2B,kBAAkB,IAAI,CAAC3B,EAAIW,GAAG,WAAWT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,YAAbP,EAAIc,OAAmC,QAAZd,EAAIQ,KAAgBC,WAAW,0CAA0CU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAI4B,aAAa,IAAI,CAAC5B,EAAIW,GAAG,WAAWT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,YAAbP,EAAIc,OAAmC,QAAZd,EAAIQ,KAAgBC,WAAW,0CAA0CU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAIuB,aAAa,IAAI,CAACvB,EAAIW,GAAG,WAAWT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,YAAbP,EAAIc,MAAqBL,WAAW,wBAAwBU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAI6B,iBAAiB,IAAI,CAAC7B,EAAIW,GAAG,UAAUT,EAAG,YAAY,CAACE,WAAW,CAAC,CAACC,KAAK,OAAOC,QAAQ,SAASC,MAAoB,YAAbP,EAAIc,MAAqBL,WAAW,wBAAwBU,MAAM,CAAC,MAAQ,GAAG,KAAO,WAAWE,GAAG,CAAC,MAAQ,SAASC,GAAQ,OAAOtB,EAAI8B,cAAc,IAAI,CAAC9B,EAAIW,GAAG,WAAW,IAAI,EACzoF,EACIoB,EAAkB,G,mBC6EtB,GACA1B,KAAA,YACA2B,MAAA,CACA,EACAC,OACA,OACAjB,GAAA,IAAAkB,KACAC,MAAA,IAAAC,MACAtB,MAAA,OACAD,SAAA,MACAL,KAAA,SACAS,SAAA,EACAG,IAAA,GAEA,EACAiB,QAAA,CACAC,UAEA,KAAAtB,GAAAuB,UACA,KAAAvB,GAAA,IAAAkB,KACA,KAAAC,MAAAK,QACA,KAAAhC,KAAA,SACA,KAAAM,MAAA,OACA,KAAAD,SAAA,MACA,KAAA4B,MAAA,QACA,EACAjB,gBACA,KAAAR,GACA0B,QACAC,MAAAC,IACA,KAAA9B,MAAA,UACA,KAAAD,SAAA,aAEAgC,OAAAC,IACA,KAAAC,SAAAD,MAAAA,EAAA,GAEA,EACArB,gBACA,KAAAT,GAAAwB,QACA,KAAA1B,MAAA,QACA,KAAAD,SAAA,OACA,EACAa,iBACA,KAAAV,GAAAgC,SACA,KAAAlC,MAAA,UACA,KAAAD,SAAA,SACA,EACAc,mBACA,KAAAX,GAAAwB,QACA,KAAA1B,MAAA,WACA,KAAAD,SAAA,OACA,EACAe,cACA,IAAAqB,EAAA,KAAAjC,GAAAkC,aACA9B,EAAA+B,IAAAC,gBAAAH,GACA,KAAAI,MAAAlB,MAAAmB,IAAAlC,EACA,KAAAiC,MAAAlB,MAAAoB,OACA,KAAA/C,KAAA,MACA,EACAe,cACA,KAAA8B,MAAAlB,MAAAK,QACA,KAAAhC,KAAA,QACA,EACAqB,kBACA,KAAAb,GAAAuB,UACA,KAAAvB,GAAA,IAAAkB,KACA,KAAAlB,GAAA0B,QACA,KAAA5B,MAAA,UACA,KAAAN,KAAA,SACA,KAAAK,SAAA,SACA,EACAiB,eACA,IAAAmB,EAAA,KAAAjC,GAAAkC,aACA7C,GAAA,IAAAmD,MAAAC,UAAA,OACA,IAAAC,EAAA,IAAAC,OAAAC,SACAF,EAAAG,OAAA,OAAAZ,EAAA5C,GACA,KAAAyD,MAAA,CACA1C,IAAA,eACAa,KAAAyB,EACAK,OAAA,OACAC,QAAA,CACA,wCAEArB,MAAAvB,IACA,IAAAa,EAAA,CACAhB,SAAAF,SAAA,KAAAC,GAAAC,UACAG,IAAAA,GAEA,KAAAqB,MAAA,OAAAR,GACA,KAAAK,SAAA,GAEA,IC1K2R,I,UCQvR2B,GAAY,OACd,EACAlE,EACAgC,GACA,EACA,KACA,KACA,MAIF,EAAekC,EAAiB,O,uDCnBhC,SAAAC,EAAAC,GAEAC,EAAAC,QAAAF,GAMA,CARA,CASC,cACD,OAAO,SAAPD,GCTA,IAAAC,EAAA,GAGA,SAAAG,EAAAC,GAGA,GAAAJ,EAAAI,GACA,OAAAJ,EAAAI,GAAAF,QAGA,IAAAG,EAAAL,EAAAI,GAAA,CACAA,EAAAA,EACAE,GAAA,EACAJ,QAAA,IAUA,OANAH,EAAAK,GAAAG,KAAAF,EAAAH,QAAAG,EAAAA,EAAAH,QAAAC,GAGAE,EAAAC,GAAA,EAGAD,EAAAH,OAAA,CA0DA,OArDAC,EAAAK,EAAAT,EAGAI,EAAAM,EAAAT,EAGAG,EAAAO,EAAA,SAAAX,EAAAC,EAAAI,GACAD,EAAAE,EAAAN,EAAAC,IACAW,OAAAC,eAAAb,EAAAC,EAAA,CAA0Ca,YAAA,EAAAC,IAAAV,GAAA,EAK1CD,EAAAY,EAAA,SAAAhB,GACA,oBAAAiB,QAAAA,OAAAC,aACAN,OAAAC,eAAAb,EAAAiB,OAAAC,YAAA,CAAwD7E,MAAA,WAExDuE,OAAAC,eAAAb,EAAA,cAAiD3D,OAAA,KAQjD+D,EAAAJ,EAAA,SAAAA,EAAAC,GAEA,GADA,EAAAA,IAAAD,EAAAI,EAAAJ,IACA,EAAAC,EAAA,OAAAD,EACA,KAAAC,GAAA,iBAAAD,GAAAA,GAAAA,EAAAmB,WAAA,OAAAnB,EACA,IAAAK,EAAAO,OAAAQ,OAAA,MAGA,GAFAhB,EAAAY,EAAAX,GACAO,OAAAC,eAAAR,EAAA,WAAyCS,YAAA,EAAAzE,MAAA2D,IACzC,EAAAC,GAAA,iBAAAD,EAAA,QAAAM,KAAAN,EAAAI,EAAAO,EAAAN,EAAAC,EAAA,SAAAL,GAAgH,OAAAD,EAAAC,EAAA,EAAqBoB,KAAA,KAAAf,IACrI,OAAAD,CAAA,EAIAD,EAAAA,EAAA,SAAAJ,GACA,IAAAC,EAAAD,GAAAA,EAAAmB,WACA,WAA2B,OAAAnB,EAAAsB,OAAA,EAC3B,WAAiC,OAAAtB,CAAA,EAEjC,OADAI,EAAAO,EAAAV,EAAA,IAAAA,GACAA,CAAA,EAIAG,EAAAE,EAAA,SAAAN,EAAAC,GAAsD,OAAAW,OAAAW,UAAAC,eAAAhB,KAAAR,EAAAC,EAAA,EAGtDG,EAAAqB,EAAA,GAIArB,EAAAA,EAAAsB,EAAA,GDxEO,CCwEP,UAAA1B,EAAAC,EAAAG,GAAA,aCpEA,SAASC,EAAYL,EAAMC,EAAQG,GAC/B,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAIuB,OAAQtB,IAC5BL,EAAK4B,SAAS3B,EAASI,EAAGD,EAAIyB,WAAWxB,GAAA,CAAAO,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,IAejD4D,EAAA6B,SAAA,SAAyB9B,EAAMC,EAAyBG,GAYpD,IAVA,IAAIC,EAAOJ,EAAkBG,EACzBE,EAAcyB,KAAKC,IAAI3B,EAAM,GAC7BW,EAAQhB,EAAKiC,KACbC,EAAQlC,EAAKmC,MACbT,EAASK,KAAKK,OAAQpB,EAAMW,OAASO,EAAMP,QAAWtB,GACtDgC,EAAS,IAAIC,aAAaZ,GAC1BhB,EAAQ,EACRH,EAAI,EAGDG,EAAQgB,GAAQ,CAEnB,IAAIa,EAAOR,KAAKK,MAAM7B,GAEtB8B,EAAO3B,GAASM,EAAMuB,GACtB7B,IAEIwB,EAAMP,SAMNU,EAAO3B,GAASwB,EAAMK,GACtB7B,KAGJH,GAAKD,CAAA,CAGT,OAAO+B,CAAA,EAWXpC,EAAAuC,UAAA,SAA0BxC,EAAOC,EAAoBG,QAAA,IAAAA,IAAAA,GAAA,GACjD,IAAIC,EAAS,EACTC,EAAaN,EAAM2B,QAAU1B,EAAa,GAC1Ce,EAAS,IAAIyB,YAAYnC,GACzB4B,EAAO,IAAIQ,SAAS1B,GAGxB,GAAmB,IAAff,EACA,IAAK,IAAIyB,EAAI,EAAGA,EAAI1B,EAAM2B,OAAQD,IAAKrB,IAAU,CAE7C,IAGIgC,GAHA3B,EAAIqB,KAAKC,KAAK,EAAGD,KAAKY,IAAI,EAAG3C,EAAM0B,MAGzB,EAAQ,IAAJhB,EAAc,IAAJA,EAC5B2B,GAAOA,EAAM,IACbH,EAAKU,QAAQvC,EAAQgC,EAAA,MAGzB,IAASX,EAAI,EAAGA,EAAI1B,EAAM2B,OAAQD,IAAKrB,GAAU,EAAG,CAChD,IAAIK,EAAIqB,KAAKC,KAAK,EAAGD,KAAKY,IAAI,EAAG3C,EAAM0B,KAGvCQ,EAAKW,SAASxC,EAAQK,EAAI,EAAQ,MAAJA,EAAiB,MAAJA,EAAYN,EAAA,CAI/D,OAAO8B,CAAA,EAeXjC,EAAA6C,UAAA,SAA0B9C,EAAiBC,EAAyBG,EAA0BE,EAAqBU,EAAyBkB,QAAA,IAAAA,IAAAA,GAAA,GACxI,IAAIR,EAAatB,EAAmBH,EAAkBA,EAAkBG,EACpEiC,EAAarB,EACbN,EAAS,IAAI+B,YAAY,GAAKzC,EAAM+C,YACpCxC,EAAO,IAAImC,SAAShC,GACpB6B,EAAejC,EACfmB,EAAS,EAGbpB,EAAYE,EAAMkB,EAAQ,QAASA,GAAU,EAE7ClB,EAAKyC,UAAUvB,EAAQ,GAAKzB,EAAM+C,WAAYb,GAE9C7B,EAAYE,EAFgDkB,GAAU,EAE5C,QAE1BpB,EAAYE,EAFuBkB,GAAU,EAEnB,QAASA,GAAU,EAE7ClB,EAAKyC,UAAUvB,EAAQ,GAAIS,GAAcT,GAAU,EAEnDlB,EAAK0C,UAAUxB,EAAQ,EAAGS,GAAcT,GAAU,EAElDlB,EAAK0C,UAAUxB,EAAQc,EAAcL,GAAcT,GAAU,EAE7DlB,EAAKyC,UAAUvB,EAAQC,EAAYQ,GAAcT,GAAU,EAE3DlB,EAAKyC,UAAUvB,EAAQc,EAAeb,GAAcW,EAAa,GAAIH,GAAcT,GAAU,EAE7FlB,EAAK0C,UAAUxB,EAAQc,GAAgBF,EAAa,GAAIH,GAAcT,GAAU,EAEhFlB,EAAK0C,UAAUxB,EAAQY,EAAYH,GAEnC7B,EAAYE,EAFqCkB,GAAU,EAEjC,QAASA,GAAU,EAE7ClB,EAAKyC,UAAUvB,EAAQzB,EAAM+C,WAAYb,GAAcT,GAAU,EAGjE,IAAK,IAAId,EAAI,EAAGA,EAAIX,EAAM+C,YACtBxC,EAAKqB,SAASH,EAAQzB,EAAMkD,SAASvC,IACrCc,IACAd,IAGJ,OAAOJ,CAAA,YAAAP,EAAAC,EAAAG,GAAA,iBAAAC,EAAAC,EAAA,WAAA6C,YAAA9C,EAAA,SAAAL,EAAAC,GAAA,OAAAI,EAAAO,OAAAwC,gBAAA,CAAAC,UAAA,cAAAC,OAAA,SAAAtD,EAAAC,GAAAD,EAAAqD,UAAApD,CAAA,YAAAD,EAAAC,GAAA,QAAAG,KAAAH,EAAAA,EAAAuB,eAAApB,KAAAJ,EAAAI,GAAAH,EAAAG,GAAA,GAAAJ,EAAAC,EAAA,WAAAD,EAAAC,GAAA,SAAAG,IAAA,KAAAmD,YAAAvD,CAAA,CAAAK,EAAAL,EAAAC,GAAAD,EAAAuB,UAAA,OAAAtB,EAAAW,OAAAQ,OAAAnB,IAAAG,EAAAmB,UAAAtB,EAAAsB,UAAA,IAAAnB,EAAA,GAAAQ,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,IC7JX,IAAA2E,EAAAZ,EAAA,GACA8B,EAAA9B,EAAA,GACAsB,EAAAtB,EAAA,GAgBAiC,EAAA,SAAArC,GAgBI,SAAAC,EAAYA,QAAA,IAAAA,IAAAA,EAAA,IAAZ,IAAAG,EACIJ,EAAAQ,KAAA,KAAMP,IAAQ,YAhBVG,EAAAoD,aAAA,EACApD,EAAAqD,SAAA,EACArD,EAAAsD,WAAA,EAAqBtD,CAAA,CAyTjC,OA5ToBE,EAAAL,EAAAD,GA0BTC,EAAAsB,UAAAoC,UAAP,SAAiB3D,QAAA,IAAAA,IAAAA,EAAA,IACbjE,KAAK6H,aAAa5D,EAAA,EAMtBC,EAAAsB,UAAA/C,MAAA,WACI,OAAIzC,KAAKyH,YAEEK,QAAQC,UAGnB/H,KAAKyH,aAAA,EAEEzH,KAAKgI,cAAA,EAMhB9D,EAAAsB,UAAAjD,MAAA,WACQvC,KAAKyH,cAAgBzH,KAAK0H,UAC1B1H,KAAK0H,SAAA,EAEL1H,KAAKiI,cAAA,EAOb/D,EAAAsB,UAAAzC,OAAA,WACQ/C,KAAKyH,aAAezH,KAAK0H,UACzB1H,KAAK0H,SAAA,EACL1H,KAAKkI,eAAA,EASbhE,EAAAsB,UAAA2C,KAAA,WACQnI,KAAKyH,cACLzH,KAAKyH,aAAA,EACLzH,KAAK0H,SAAA,EACL1H,KAAKoI,aAAA,EAOblE,EAAAsB,UAAAlC,KAAA,WACItD,KAAKmI,OAELnI,KAAK2H,WAAA,EAEL3H,KAAKqI,QAAUrI,KAAKqI,SACpB1C,EAAAJ,QAAO+C,WAAWtI,KAAKuI,WAEvB,IAAMtE,EAAQjE,KAAKwI,SAEfvE,EAAM+C,WAAa,IACnBrB,EAAAJ,QAAOjC,KAAKW,EAAMwE,OAAA,EAO1BvE,EAAAsB,UAAAkD,YAAA,WACI,OAAO/C,EAAAJ,QAAOmD,aAAA,EAQlBxE,EAAAsB,UAAAmD,UAAA,YACQ3I,KAAKyH,aAAgBzH,KAAK2H,YAK9B3H,KAAK2H,WAAA,EACL3H,KAAK4I,aAAe5I,KAAK4I,cACzBjD,EAAAJ,QAAOoD,YAAA,EAQXzE,EAAAsB,UAAAqD,WAAA,WACQ7I,KAAKyH,aAAezH,KAAK2H,YAK7B3H,KAAK2H,WAAA,EACL3H,KAAK8I,cAAgB9I,KAAK8I,eAC1BnD,EAAAJ,QAAOsD,aAAA,EAQX3E,EAAAsB,UAAAuD,SAAA,WACQ/I,KAAKyH,cAKTzH,KAAK2H,WAAA,EACL3H,KAAKgJ,YAAchJ,KAAKgJ,aACxBrD,EAAAJ,QAAOwD,WAAA,EAGX7E,EAAAsB,UAAAlD,QAAA,WAGI,OAFAqD,EAAAJ,QAAO0D,cAEAjJ,KAAKkJ,eAAA,EAkChBhF,EAAAsB,UAAA2D,qBAAA,WACI,OAAOnJ,KAAKoJ,gBAAA,EAQhBlF,EAAAsB,UAAA6D,mBAAA,WAEI,OAAO1D,EAAAJ,QAAO6D,gBAAA,EAGlBlF,EAAAsB,UAAA8D,OAAA,WAEItJ,KAAKmI,OAEL,IAAIlE,EAAYjE,KAAKuJ,UAIrB,OAFAtF,EAAOkC,EAAAJ,SAAS9B,EAAMjE,KAAKwJ,gBAAiBxJ,KAAKyJ,kBAE1CtD,EAAAM,UAAUxC,EAAMjE,KAAK0J,gBAAiB1J,KAAK2J,YAAA,EAStDzF,EAAAsB,UAAAoE,WAAA,WACI,OAAO,IAAIC,KAAK,CAAE7J,KAAKsJ,UAAA,EAS3BpF,EAAAsB,UAAAsE,YAAA,SAAY7F,QAAA,IAAAA,IAAAA,EAAA,YACR,IAAIC,EAAUlE,KAAK4J,aAEnB3E,EAAA6E,YAAY5F,EAASD,EAAA,EASzBC,EAAAsB,UAAAgD,OAAA,WACI,IAAIvE,EAAUjE,KAAKsJ,SAGnB,OAAOnD,EAAAY,UAAU9C,EAASjE,KAAKwJ,gBAC3BxJ,KAAKyJ,iBAAkBzJ,KAAK+J,OAAOC,YAAahK,KAAK0J,gBAAiB1J,KAAK2J,YAAA,EASnFzF,EAAAsB,UAAAvC,WAAA,WACI,OAAO,IAAI4G,KAAK,CAAE7J,KAAKwI,UAAY,CAAEyB,KAAM,eAS/C/F,EAAAsB,UAAA0E,YAAA,SAAYjG,QAAA,IAAAA,IAAAA,EAAA,YACR,IAAIC,EAAUlE,KAAKiD,aAEnBgC,EAAAiF,YAAYhG,EAASD,EAAA,EAMzBC,EAAAsB,UAAA2E,SAAA,SAASlG,EAAMC,EAAcG,GACzBY,EAAAkF,SAASlG,EAAMC,EAAMG,EAAA,EAQzBH,EAAAsB,UAAA4E,eAAA,WACI,IAAMnG,EAAMjE,KAAKsJ,SACXpF,EAASD,EAAI+C,WACb3C,EAAcrE,KAAK2J,YACnBrF,EAAM,CAAE4B,KAAM,KAAME,MAAO,MAEjC,GAAgC,IAA5BpG,KAAK+J,OAAOC,YAAmB,CAE/B,IAAMzF,EAAK,IAAIoC,SAAS,IAAID,YAAYxC,EAAS,IAC3Ce,EAAK,IAAI0B,SAAS,IAAID,YAAYxC,EAAS,IAGjD,GAA+B,KAA3BlE,KAAK+J,OAAOM,WACZ,IAAK,IAAIlE,EAAI,EAAGA,EAAIjC,EAAS,EAAGiC,GAAK,EACjC5B,EAAGuC,SAASX,EAAGlC,EAAIqG,SAAa,EAAJnE,EAAO9B,GAAcA,GACjDY,EAAG6B,SAASX,EAAGlC,EAAIqG,SAAa,EAAJnE,EAAQ,EAAG9B,GAAcA,QAGzD,IAAS8B,EAAI,EAAGA,EAAIjC,EAAS,EAAGiC,GAAK,EACjC5B,EAAGsC,QAAQV,EAAGlC,EAAIsG,QAAY,EAAJpE,IAC1BlB,EAAG4B,QAAQV,EAAGlC,EAAIsG,QAAY,EAAJpE,EAAQ,IAI1C7B,EAAI4B,KAAO3B,EACXD,EAAI8B,MAAQnB,CAAA,MAGZX,EAAI4B,KAAOjC,EAGf,OAAOK,CAAA,EAEfJ,CAAA,CA5TA,CAfAG,EAAA,GAeoBkB,SA8TpBrB,EAAAqB,QAAee,CAAA,WAAArC,EAAAC,EAAAG,GAAA,aCzUf,SAASC,EAAUL,EAAMC,EAAcG,GACnC,IAAIC,EAAKkG,SAASC,cAAc,KAEhCnG,EAAGoG,KAAOhH,OAAOR,IAAIC,gBAAgBc,GACrCK,EAAG6F,SAAejG,EAAI,IAAMG,EAC5BC,EAAGqG,OAAA,CAAA9F,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,IASP4D,EAAAgG,YAAA,SAA4BjG,EAASC,QAAA,IAAAA,IAAAA,EAAA,YACjCI,EAAUL,EAASC,EAAM,QAU7BA,EAAA4F,YAAA,SAA4B7F,EAASC,QAAA,IAAAA,IAAAA,EAAA,YACjCI,EAAUL,EAASC,EAAM,QAI7BA,EAAAiG,SAAA,SAAyBlG,EAAMC,EAAcG,GACzC,OAAOC,EAAUL,EAAMC,EAAMG,EAAA,YAAAJ,EAAAC,EAAAG,GAAA,aAAAQ,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,ICtCjC,IAAAgE,EAAAD,EAAA,GAIIE,EAAc,KACdU,EAAmB,EACnBkB,EAAoB,EACpBR,EAAe,KACfW,EAAgB,KAEhB3B,EAAiB,KAEjBH,GAAA,EACAgC,EAAoB,EACpBd,EAAiB,aAerB,SAASd,IAGL,OAFAJ,GAAA,EAEOmB,EAAQiF,gBAAgBjG,EAAUkG,MAAM,IAAI,SAAA5G,IAC/CM,EAASoB,EAAQmF,sBAGVC,QAAU,WACRvG,IAEDgC,EAAYb,EAAQqF,YAAc7E,EAAYlB,EAC9CS,IAAA,EAMRnB,EAAOkE,OAASxE,EAEhBM,EAAO0G,QAAQ3E,GACfA,EAAS2E,QAAQtF,EAAQuF,aACzB3G,EAAO9B,MAAM,EAAGwC,GAGhBkB,EAAYR,EAAQqF,WAAA,IACrB,SAAS/G,GACRK,EAAA6G,WAAWlH,EAAA,IAKnB,SAASmH,IACD7G,IACAA,EAAO4D,OACP5D,EAAS,MAIjB,IAAA8G,EAAA,oBAAApH,IAAA,CA+EA,OAxEWA,EAAAX,KAAP,SAAYW,GAUR,OATK0B,IAvDTA,EAAU,IAAKjC,OAAO4H,cAAgB5H,OAAO6H,qBAC7CjF,EAAWX,EAAQ6F,kBACVC,QAAU,MAyDfzL,KAAK+I,WAELpE,EAAYV,EACZuC,EAAY,EAEL5B,GAAA,EAOJX,EAAA0E,UAAP,WACIyC,IAEAnG,GAAYU,EAAQqF,YAAc7E,EAClC3B,GAAA,CAAW,EAORP,EAAA4E,WAAP,WACI,OAAOjE,GAAA,EAOJX,EAAA8E,SAAP,WACI9D,EAAW,EACXN,EAAY,KAEZyG,GAAA,EAGGnH,EAAAgF,YAAP,WACIjJ,KAAK+I,UAAA,EAGF9E,EAAAmF,eAAP,WACI,IAAInF,EAAY,IAAIyH,WAAWpF,EAASqF,mBAIxC,OAFArF,EAASsF,sBAAsB3H,GAExBA,CAAA,EAUJA,EAAAqE,WAAP,SAAkBrE,QAAA,IAAAA,IAAAA,EAAA,cACdyB,EAAYzB,CAAA,EAITA,EAAAyE,YAAP,WACI,IAAIzE,EAAQO,EAAWS,EAAWU,EAAQqF,YAAc7E,EAAYlB,EAEpE,OAAOuB,GAAavC,CAAA,EAE5BA,CAAA,CA/EA,GAAAC,EAAAqB,QAAA8F,CAAA,WAAApH,EAAAC,EAAAG,GAAA,aAAAQ,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,IC9DA4D,EAAAiH,WAAA,SAA2BlH,GACvB,MAAM,IAAI4H,MAAM5H,EAAA,YAAAA,EAAAC,EAAAG,GAAA,aAAAQ,OAAAC,eAAAZ,EAAA,cAAA5D,OAAA,ICNpB,IAAAgE,EAAAD,EAAA,GAeAE,EAAA,WA0CI,SAAAN,EAAYC,QAAA,IAAAA,IAAAA,EAAA,IAtCJ,KAAA4H,KAAe,EACf,KAAAC,QAA+B,GAC/B,KAAAC,QAA+B,GAE/B,KAAAC,QAA2B,GAGzB,KAAAC,gBAA0B,GAO1B,KAAAC,SAAmB,EACnB,KAAAnL,SAAmB,EACrB,KAAAoL,YAAA,EAwBJ,IASQ/H,EATJC,EAAU,IAAKZ,OAAO4H,cAAgB5H,OAAO6H,oBAEjDvL,KAAKwJ,gBAAkBlF,EAAQ+H,WAG/BrM,KAAK6H,aAAa3D,GAGlBlE,KAAK2J,aACGtF,EAAS,IAAIqC,YAAY,GAC7B,IAAIC,SAAStC,GAAQyC,SAAS,EAAG,KAAK,GACD,MAA9B,IAAIwF,WAAWjI,GAAQ,IAGlCJ,EAASsI,eAAA,CAsTjB,OAnTctI,EAAAuB,UAAAqC,aAAV,SAAuB5D,QAAA,IAAAA,IAAAA,EAAA,IACnBjE,KAAK+J,OAAS,CAEVM,YAAa,CAAC,EAAG,IAAImC,QAAQvI,EAAQoG,YAAcpG,EAAQoG,WAAa,GAExEgC,YAAa,CAAC,IAAM,MAAO,KAAO,MAAO,KAAO,MAAO,MAAOG,QAAQvI,EAAQoI,YAAcpI,EAAQoI,WAAarM,KAAKwJ,gBAEtHQ,aAAc,CAAC,EAAG,GAAGwC,QAAQvI,EAAQ+F,aAAe/F,EAAQ+F,YAAc,GAK9EhK,KAAKyJ,iBAAmBzJ,KAAK+J,OAAOsC,WACpCrM,KAAK0J,gBAAkB1J,KAAK+J,OAAOM,UAAA,EASvCpG,EAAAuB,UAAAwC,YAAA,eAAA/D,EAAA,KAQI,OAPIjE,KAAKyM,SAELzM,KAAKkJ,gBAGTlJ,KAAK0M,eAEEC,UAAUC,aAAaC,aAAa,CACvC3K,OAAA,IACDQ,MAAK,SAAAwB,GAGJD,EAAK6I,WAAa7I,EAAKwI,QAAQM,wBAAwB7I,GACvDD,EAAKtB,OAASuB,CAAA,IAKZxB,MAAK,WAEPuB,EAAK6I,WAAW7B,QAAQhH,EAAK+I,UAC7B/I,EAAK+I,SAAS/B,QAAQhH,EAAKgJ,UAG3BhJ,EAAKgJ,SAAShC,QAAQhH,EAAKwI,QAAQvB,YAAA,KAS3CjH,EAAAuB,UAAAyC,YAAA,WACIjI,KAAKoM,YAAA,CAAa,EAQtBnI,EAAAuB,UAAA0C,aAAA,WACIlI,KAAKoM,YAAA,CAAa,EAOtBnI,EAAAuB,UAAA4C,WAAA,WACIpI,KAAK8M,YAAc9M,KAAK8M,WAAWI,aACnClN,KAAKmN,QAAUnN,KAAKmN,OAAOhF,OAC3BnI,KAAKiN,SAASC,aACdlN,KAAKgN,SAASE,aACdlN,KAAKoM,YAAA,CAAa,EAOtBnI,EAAAuB,UAAA0D,cAAA,WAKI,OAJAlJ,KAAKoN,oBAELpN,KAAKqN,aAEErN,KAAKsN,mBAAA,EAGhBrJ,EAAAuB,UAAA4D,eAAA,WACI,IAAInF,EAAY,IAAIyH,WAAW1L,KAAKgN,SAASrB,mBAI7C,OAFA3L,KAAKgN,SAASpB,sBAAsB3H,GAE7BA,CAAA,EAIXA,EAAAuB,UAAA+D,QAAA,WAGI,OAFgBvJ,KAAKuN,MAAA,EASjBtJ,EAAAuB,UAAA4H,kBAAR,WACIpN,KAAK+L,QAAQnG,OAAS,EACtB5F,KAAKgM,QAAQpG,OAAS,EACtB5F,KAAK8L,KAAO,EACZ9L,KAAKmM,SAAW,EAChBnM,KAAKwN,IAAM,KACXxN,KAAK8M,WAAa,KAClB9M,KAAKgB,SAAW,GAUZiD,EAAAuB,UAAA+H,KAAR,WACI,IAAItJ,EAAQ,KACRC,EAAQ,IAAIqC,aAAa,GAGzB,IAAMvG,KAAK+J,OAAOC,YAClB/F,EAAQ,IAAIsC,aAAavG,KAAK8L,OAE9B7H,EAAQ,IAAIsC,aAAavG,KAAK8L,KAAO,GACrC5H,EAAQ,IAAIqC,aAAavG,KAAK8L,KAAO,IAOzC,IAJA,IAAIzH,EAAS,EAIJC,EAAI,EAAGA,EAAItE,KAAK+L,QAAQnG,OAAQtB,IACrCL,EAAMwJ,IAAIzN,KAAK+L,QAAQzH,GAAID,GAC3BA,GAAUrE,KAAK+L,QAAQzH,GAAGsB,OAK9B,IAFAvB,EAAS,EAEAC,EAAI,EAAGA,EAAItE,KAAKgM,QAAQpG,OAAQtB,IACrCJ,EAAMuJ,IAAIzN,KAAKgM,QAAQ1H,GAAID,GAC3BA,GAAUrE,KAAKgM,QAAQ1H,GAAGsB,OAG9B,MAAO,CACHM,KAAMjC,EACNmC,MAAOlC,EAAA,EAOPD,EAAAuB,UAAAkH,aAAR,eAAAzI,EAAA,KAEIjE,KAAKoN,oBAELpN,KAAKyM,QAAU,IAAK/I,OAAO4H,cAAgB5H,OAAO6H,oBAElDvL,KAAKgN,SAAWhN,KAAKyM,QAAQjB,iBAC7BxL,KAAKgN,SAASvB,QAAU,KAIxB,IAAIvH,EAAelE,KAAKyM,QAAQiB,uBAAyB1N,KAAKyM,QAAQkB,qBACtE3N,KAAKiN,SAAW/I,EAAa0J,MAAM5N,KAAKyM,QAAS,CAAC,KAAMzM,KAAK+J,OAAOC,YAAahK,KAAK+J,OAAOC,cAG7FhK,KAAKiN,SAASY,eAAiB,SAAA3J,GAC3B,GAAKD,EAAKmI,WAAV,CAKA,IAEI/H,EAFAC,EAAQJ,EAAE4J,YAAY1D,eAAe,GACrC7F,EAAQ,KAGZN,EAAK8H,QAAQgC,KAAK,IAAIxH,aAAajC,IAEnCL,EAAK6H,MAAQxH,EAAMsB,OAGf,IAAM3B,EAAK8F,OAAOC,cAClBzF,EAAQL,EAAE4J,YAAY1D,eAAe,GACrCnG,EAAK+H,QAAQ+B,KAAK,IAAIxH,aAAahC,IAEnCN,EAAK6H,MAAQvH,EAAMqB,QAYnB3B,EAAKkI,SAAWnG,KAAKK,MAAMpC,EAAK6H,KAAO9F,KAAKC,IAAKhC,EAAKuF,gBAAkBvF,EAAKwF,iBAAkB,KACxFxF,EAAKyF,gBAAkB,GAMlCrF,EAAoC,IAA9B2B,KAAKC,IAAI2H,MAAM5H,KAAM1B,GAE3BL,EAAKjD,UAAY,KAAOiD,EAAKuF,gBAE7BvF,EAAK+J,WAAa/J,EAAK+J,UAAU/J,EAAKjD,UAEtCiD,EAAKgK,YAAchK,EAAKgK,WAAW,CAC/BjN,SAAUiD,EAAKjD,SACfmL,SAAUlI,EAAKkI,SACf+B,IAAG7J,GAAA,IAWPJ,EAAAuB,UAAA6H,WAAR,WACQrN,KAAK2C,QAAU3C,KAAK2C,OAAOwL,YAC3BnO,KAAK2C,OAAOwL,YAAYC,SAAQ,SAAAnK,GAAS,OAAAA,EAAMkE,MAAA,IAC/CnI,KAAK2C,OAAS,OAQdsB,EAAAuB,UAAA8H,kBAAR,WACI,OAAItN,KAAKyM,SAAWzM,KAAKyM,QAAQ4B,OAAgC,WAAvBrO,KAAKyM,QAAQ5L,MAC5Cb,KAAKyM,QAAQ4B,QAEb,IAAIvG,SAAQ,SAAC7D,GAChBA,GAAA,KAMLA,EAAAsI,cAAP,oBACQI,UAAUC,eACVD,UAAUC,aAAe,CAAC,QAAD,IAGzBD,UAAUC,aAAaC,eACvBF,UAAUC,aAAaC,aAAe,SAAS5I,GAC3C,IAAIC,EAAeyI,UAAUE,cAAgBF,UAAU2B,oBAAsB3B,UAAU4B,gBAEvF,OAAKrK,EAIE,IAAI4D,SAAQ,SAASzD,EAASC,GACjCJ,EAAaO,KAAKkI,UAAW1I,EAAaI,EAASC,EAAA,IAJ5CwD,QAAQC,OAAO,IAAI8D,MAAM,6BAiBxC5H,EAAAuB,UAAAgJ,iBAAR,SAAyBvK,EAAOC,GAC5B,IAAIG,EAAU,IAAIkC,aAAatC,GAC3BM,EAAU,IAAIgC,aAAarC,GAE3Be,EAAOX,EAAAyB,SAAS,CAChBG,KAAM7B,EACN+B,MAAO7B,GACRvE,KAAKwJ,gBAAiBxJ,KAAKyJ,kBAE9B,OAAOnF,EAAAmC,UAAUxB,EAAMjF,KAAK0J,gBAAiB1J,KAAK2J,YAAA,EAG/C1F,EAAAwK,cAAP,WAGI,OAFAzO,KAAKuM,gBAEEI,UAAUC,aAAaC,aAAa,CAAC3K,OAAA,IAAcQ,MAAK,SAACuB,GAC5DA,GAAUA,EAAOkK,YAAYC,SAAQ,SAAAnK,GAAS,OAAAA,EAAMkE,MAAA,QAGhElE,CAAA,CAhXA,GAAAC,EAAAqB,QAAAhB,CAAA,IAAAgB,OAAA,G,uBCfApB,EAAOC,QAAU,EAAjBD,K","sources":["webpack://test/./src/views/audioRecord/index.vue","webpack://test/src/views/audioRecord/index.vue","webpack://test/./src/views/audioRecord/index.vue?a0d4","webpack://test/./src/views/audioRecord/index.vue?8ace","webpack://test/[name]/webpack/universalModuleDefinition","webpack://test/[name]/webpack/bootstrap","webpack://test/[name]/src/transform/transform.ts","webpack://test/[name]/src/index.ts","webpack://test/[name]/src/download/download.ts","webpack://test/[name]/src/player/player.ts","webpack://test/[name]/src/exception/exception.ts","webpack://test/[name]/src/recorder/recorder.ts","webpack://test/./node_modules/js-audio-recorder/index.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('div',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.mode == 'RECORD'),expression:\"mode == 'RECORD'\"}]},[_c('div',{staticClass:\"chat-voice-tip\"},[_vm._v(_vm._s(_vm.stateTip))]),_c('div',[_vm._v(\"时长: \"+_vm._s(_vm.state == \"STOP\" ? 0 : parseInt(_vm.rc.duration))+\"s\")])]),_c('audio',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.mode == 'PLAY'),expression:\"mode == 'PLAY'\"}],ref:\"audio\",attrs:{\"src\":_vm.url,\"controls\":\"\"},on:{\"ended\":function($event){return _vm.onStopAudio()}}}),_c('el-divider',{attrs:{\"content-position\":\"center\"}}),_c('el-row',{staticClass:\"chat-voice-btn-group\"},[_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'STOP'),expression:\"state == 'STOP'\"}],attrs:{\"round\":\"\",\"type\":\"primary\"},on:{\"click\":function($event){return _vm.onStartRecord()}}},[_vm._v(\"开始录音\")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'RUNNING'),expression:\"state == 'RUNNING'\"}],attrs:{\"round\":\"\",\"type\":\"warning\"},on:{\"click\":function($event){return _vm.onPauseRecord()}}},[_vm._v(\"暂停录音\")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'PAUSE'),expression:\"state == 'PAUSE'\"}],attrs:{\"round\":\"\",\"type\":\"primary\"},on:{\"click\":function($event){return _vm.onResumeRecord()}}},[_vm._v(\"继续录音\")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'RUNNING' || _vm.state == 'PAUSE'),expression:\"state == 'RUNNING' || state == 'PAUSE'\"}],attrs:{\"round\":\"\",\"type\":\"danger\"},on:{\"click\":function($event){return _vm.onCompleteRecord()}}},[_vm._v(\" 结束录音\")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'COMPLETE' && _vm.mode != 'PLAY'),expression:\"state == 'COMPLETE' && mode != 'PLAY'\"}],attrs:{\"round\":\"\",\"type\":\"success\"},on:{\"click\":function($event){return _vm.onPlayAudio()}}},[_vm._v(\"播放录音 \")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'COMPLETE' && _vm.mode == 'PLAY'),expression:\"state == 'COMPLETE' && mode == 'PLAY'\"}],attrs:{\"round\":\"\",\"type\":\"warning\"},on:{\"click\":function($event){return _vm.onStopAudio()}}},[_vm._v(\"停止播放 \")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'COMPLETE'),expression:\"state == 'COMPLETE'\"}],attrs:{\"round\":\"\",\"type\":\"primary\"},on:{\"click\":function($event){return _vm.onRestartRecord()}}},[_vm._v(\"重新录音\")]),_c('el-button',{directives:[{name:\"show\",rawName:\"v-show\",value:(_vm.state == 'COMPLETE'),expression:\"state == 'COMPLETE'\"}],attrs:{\"round\":\"\",\"type\":\"primary\"},on:{\"click\":function($event){return _vm.onSendRecord()}}},[_vm._v(\"立即发送\")])],1)],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n  <div>\r\n    <div v-show=\"mode == 'RECORD'\">\r\n      <div class=\"chat-voice-tip\">{{ stateTip }}</div>\r\n      <div>时长: {{ state == \"STOP\" ? 0 : parseInt(rc.duration) }}s</div>\r\n    </div>\r\n    <audio\r\n      v-show=\"mode == 'PLAY'\"\r\n      :src=\"url\"\r\n      controls\r\n      ref=\"audio\"\r\n      @ended=\"onStopAudio()\"\r\n    ></audio>\r\n    <el-divider content-position=\"center\"></el-divider>\r\n    <el-row class=\"chat-voice-btn-group\">\r\n      <el-button\r\n        round\r\n        type=\"primary\"\r\n        v-show=\"state == 'STOP'\"\r\n        @click=\"onStartRecord()\"\r\n        >开始录音</el-button\r\n      >\r\n      <el-button\r\n        round\r\n        type=\"warning\"\r\n        v-show=\"state == 'RUNNING'\"\r\n        @click=\"onPauseRecord()\"\r\n        >暂停录音</el-button\r\n      >\r\n      <el-button\r\n        round\r\n        type=\"primary\"\r\n        v-show=\"state == 'PAUSE'\"\r\n        @click=\"onResumeRecord()\"\r\n        >继续录音</el-button\r\n      >\r\n      <el-button\r\n        round\r\n        type=\"danger\"\r\n        v-show=\"state == 'RUNNING' || state == 'PAUSE'\"\r\n        @click=\"onCompleteRecord()\"\r\n      >\r\n        结束录音</el-button\r\n      >\r\n      <el-button\r\n        round\r\n        type=\"success\"\r\n        v-show=\"state == 'COMPLETE' && mode != 'PLAY'\"\r\n        @click=\"onPlayAudio()\"\r\n        >播放录音\r\n      </el-button>\r\n      <el-button\r\n        round\r\n        type=\"warning\"\r\n        v-show=\"state == 'COMPLETE' && mode == 'PLAY'\"\r\n        @click=\"onStopAudio()\"\r\n        >停止播放\r\n      </el-button>\r\n      <el-button\r\n        round\r\n        type=\"primary\"\r\n        v-show=\"state == 'COMPLETE'\"\r\n        @click=\"onRestartRecord()\"\r\n        >重新录音</el-button\r\n      >\r\n      <el-button\r\n        round\r\n        type=\"primary\"\r\n        v-show=\"state == 'COMPLETE'\"\r\n        @click=\"onSendRecord()\"\r\n        >立即发送</el-button\r\n      >\r\n    </el-row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Recorder from \"js-audio-recorder\";\r\n\r\nexport default {\r\n  name: \"chatVoice\",\r\n  props: {\r\n  },\r\n  data() {\r\n    return {\r\n      rc: new Recorder(),\r\n      audio: new Audio(),\r\n      state: \"STOP\", // STOP、RUNNING、PAUSE、COMPLETE\r\n      stateTip: \"未开始\",\r\n      mode: \"RECORD\", // RECORD 、PLAY\r\n      duration: 0,\r\n      url: \"\",\r\n    };\r\n  },\r\n  methods: {\r\n    onClose() {\r\n      // 关闭前清除数据\r\n      this.rc.destroy();\r\n      this.rc = new Recorder();\r\n      this.audio.pause();\r\n      this.mode = \"RECORD\";\r\n      this.state = \"STOP\";\r\n      this.stateTip = \"未开始\";\r\n      this.$emit(\"close\");\r\n    },\r\n    onStartRecord() {\r\n      this.rc\r\n        .start()\r\n        .then((stream) => {\r\n          this.state = \"RUNNING\";\r\n          this.stateTip = \"正在录音...\";\r\n        })\r\n        .catch((error) => {\r\n          this.$message.error(error);\r\n        });\r\n    },\r\n    onPauseRecord() {\r\n      this.rc.pause();\r\n      this.state = \"PAUSE\";\r\n      this.stateTip = \"已暂停录音\";\r\n    },\r\n    onResumeRecord() {\r\n      this.rc.resume();\r\n      this.state = \"RUNNING\";\r\n      this.stateTip = \"正在录音...\";\r\n    },\r\n    onCompleteRecord() {\r\n      this.rc.pause();\r\n      this.state = \"COMPLETE\";\r\n      this.stateTip = \"已结束录音\";\r\n    },\r\n    onPlayAudio() {\r\n      let wav = this.rc.getWAVBlob();\r\n      let url = URL.createObjectURL(wav);\r\n      this.$refs.audio.src = url;\r\n      this.$refs.audio.play();\r\n      this.mode = \"PLAY\";\r\n    },\r\n    onStopAudio() {\r\n      this.$refs.audio.pause();\r\n      this.mode = \"RECORD\";\r\n    },\r\n    onRestartRecord() {\r\n      this.rc.destroy();\r\n      this.rc = new Recorder();\r\n      this.rc.start();\r\n      this.state = \"RUNNING\";\r\n      this.mode = \"RECORD\";\r\n      this.stateTip = \"正在录音...\";\r\n    },\r\n    onSendRecord() {\r\n      let wav = this.rc.getWAVBlob();\r\n      let name = new Date().getDate() + \".wav\";\r\n      var formData = new window.FormData();\r\n      formData.append(\"file\", wav, name);\r\n      this.$http({\r\n        url: \"/file/upload\",\r\n        data: formData,\r\n        method: \"post\",\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      }).then((url) => {\r\n        let data = {\r\n          duration: parseInt(this.rc.duration),\r\n          url: url,\r\n        };\r\n        this.$emit(\"send\", data);\r\n        this.onClose();\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\">\r\n.chat-voice {\r\n  .chat-voice-tip {\r\n    font-size: 18px;\r\n  }\r\n\r\n  .chat-voice-btn-group {\r\n    margin-bottom: 20px;\r\n  }\r\n}\r\n</style>\r\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=21454658\"\nimport script from \"./index.vue?vue&type=script&lang=js\"\nexport * from \"./index.vue?vue&type=script&lang=js\"\nimport style0 from \"./index.vue?vue&type=style&index=0&id=21454658&prod&lang=scss\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/cli-service/node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (let i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\n/**\r\n * 数据合并压缩\r\n * 根据输入和输出的采样率压缩数据，\r\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n * 所以输入数据中每隔3取1位\r\n *\r\n * @param {float32array} data       [-1, 1]的pcm数据\r\n * @param {number} inputSampleRate  输入采样率\r\n * @param {number} outputSampleRate 输出采样率\r\n * @returns  {float32array}         压缩处理后的二进制数据\r\n */\r\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n    // 压缩，根据采样率进行压缩\r\n    let rate = inputSampleRate / outputSampleRate,\r\n        compression = Math.max(rate, 1),\r\n        lData = data.left,\r\n        rData = data.right,\r\n        length = Math.floor(( lData.length + rData.length ) / rate),\r\n        result = new Float32Array(length),\r\n        index = 0,\r\n        j = 0;\r\n\r\n    // 循环间隔 compression 位取一位数据\r\n    while (index < length) {\r\n        // 取整是因为存在比例compression不是整数的情况\r\n        let temp = Math.floor(j);\r\n\r\n        result[index] = lData[temp];\r\n        index++;\r\n\r\n        if (rData.length) {\r\n            /*\r\n            * 双声道处理\r\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n            */\r\n            result[index] = rData[temp];\r\n            index++;\r\n        }\r\n\r\n        j += compression;\r\n    }\r\n    // 返回压缩后的一维数据\r\n    return result;\r\n}\r\n\r\n/**\r\n * 转换到我们需要的对应格式的编码\r\n *\r\n * @param {float32array} bytes      pcm二进制数据\r\n * @param {number}  sampleBits      采样位数\r\n * @param {boolean} littleEdian     是否是小端字节序\r\n * @returns {dataview}              pcm二进制数据\r\n */\r\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\r\n    let offset = 0,\r\n        dataLength = bytes.length * (sampleBits / 8),\r\n        buffer = new ArrayBuffer(dataLength),\r\n        data = new DataView(buffer);\r\n\r\n    // 写入采样数据\r\n    if (sampleBits === 8) {\r\n        for (let i = 0; i < bytes.length; i++, offset++) {\r\n            // 范围[-1, 1]\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 8位采样位划分成2^8=256份，它的范围是0-255;\r\n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n            let val = s < 0 ? s * 128 : s * 127;\r\n            val = +val + 128;\r\n            data.setInt8(offset, val);\r\n        }\r\n    } else {\r\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\r\n            let s = Math.max(-1, Math.min(1, bytes[i]));\r\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\r\n        }\r\n    }\r\n\r\n    return data;\r\n}\r\n\r\n/**\r\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n * 所以，此处只需要在pcm数据前增加下就行了。\r\n *\r\n * @param {DataView} bytes           pcm二进制数据\r\n * @param {number}  inputSampleRate  输入采样率\r\n * @param {number}  outputSampleRate 输出采样率\r\n * @param {number}  numChannels      声道数\r\n * @param {number}  oututSampleBits  输出采样位数\r\n * @param {boolean} littleEdian      是否是小端字节序\r\n * @returns {DataView}               wav二进制数据\r\n */\r\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\r\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\r\n        sampleBits = oututSampleBits,\r\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n        data = new DataView(buffer),\r\n        channelCount = numChannels, // 声道\r\n        offset = 0;\r\n\r\n    // 资源交换文件标识符\r\n    writeString(data, offset, 'RIFF'); offset += 4;\r\n    // 下个地址开始到文件尾总字节数,即文件大小-8\r\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\r\n    // WAV文件标志\r\n    writeString(data, offset, 'WAVE'); offset += 4;\r\n    // 波形格式标志\r\n    writeString(data, offset, 'fmt '); offset += 4;\r\n    // 过滤字节,一般为 0x10 = 16\r\n    data.setUint32(offset, 16, littleEdian); offset += 4;\r\n    // 格式类别 (PCM形式采样数据)\r\n    data.setUint16(offset, 1, littleEdian); offset += 2;\r\n    // 声道数\r\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\r\n    // 采样率,每秒样本数,表示每个通道的播放速度\r\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\r\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\r\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\r\n    // 采样位数\r\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\r\n    // 数据标识符\r\n    writeString(data, offset, 'data'); offset += 4;\r\n    // 采样数据总数,即数据总大小-44\r\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\r\n\r\n    // 给wav头增加pcm体\r\n    for (let i = 0; i < bytes.byteLength;) {\r\n        data.setUint8(offset, bytes.getUint8(i));\r\n        offset++;\r\n        i++;\r\n    }\r\n\r\n    return data;\r\n}\r\n","import { downloadPCM, downloadWAV, download } from './download/download';\r\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\r\nimport Player from './player/player';\r\nimport Recorder from './recorder/recorder';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nclass Index extends Recorder {\r\n    private isrecording: boolean = false;       // 是否正在录音\r\n    private ispause: boolean = false;           // 是否是暂停\r\n    private isplaying: boolean = false;         // 是否正在播放\r\n\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        super(options);\r\n    }\r\n\r\n    /**\r\n     * 重新修改配置\r\n     *\r\n     * @param {recorderConfig} [options={}]\r\n     * @memberof Recorder\r\n     */\r\n    public setOption(options: recorderConfig = {}) {\r\n        this.setNewOption(options);\r\n    }\r\n\r\n    /**\r\n     * Start the recording\r\n     */\r\n    start(): Promise<{}> {\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return Promise.reject();\r\n        }\r\n\r\n        this.isrecording = true;\r\n\r\n        return this.startRecord();\r\n    }\r\n\r\n    /**\r\n     * Pause the recording\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // 当前不暂停的时候才可以暂停\r\n            this.pauseRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            this.resumeRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        if (this.isrecording) {\r\n            this.isrecording = false;\r\n            this.ispause = false;\r\n            this.stopRecord();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 播放录音\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.isplaying = true;\r\n\r\n        this.onplay && this.onplay();\r\n        Player.addPlayEnd(this.onplayend);  // 注册播放完成后的回调事件\r\n\r\n        const dataV = this.getWAV();\r\n\r\n        if (dataV.byteLength > 44) {\r\n            Player.play(dataV.buffer);  // 播放\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取已经播放了多长时间\r\n     */\r\n    getPlayTime(): number {\r\n        return Player.getPlayTime();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pausePlay(): void {\r\n        if (this.isrecording || !this.isplaying) {\r\n            // 正在录音或没有播放，暂停无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onpauseplay && this.onpauseplay();\r\n        Player.pausePlay();\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumePlay(): void {\r\n        if (this.isrecording || this.isplaying) {\r\n            // 正在录音或已经播放或没开始播放，恢复无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = true;\r\n        this.onresumeplay && this.onresumeplay();\r\n        Player.resumePlay();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stopPlay(): void {\r\n        if (this.isrecording) {\r\n            // 正在录音，停止录音播放无效\r\n            return;\r\n        }\r\n\r\n        this.isplaying = false;\r\n        this.onstopplay && this.onstopplay();\r\n        Player.stopPlay();\r\n    }\r\n\r\n    destroy(): Promise<{}> {\r\n        Player.destroyPlay();\r\n\r\n        return this.destroyRecord();\r\n    }\r\n\r\n    /**\r\n     * 获取当前已经录音的PCM音频数据\r\n     *\r\n     * @returns[DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getWholeData() {\r\n    //     return this.tempPCM;\r\n    // }\r\n\r\n    /**\r\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\r\n     *\r\n     * @returns [DataView]\r\n     * @memberof Recorder\r\n     */\r\n    // getNextData() {\r\n    //     let length = this.tempPCM.length,\r\n    //         data = this.tempPCM.slice(this.offset);\r\n\r\n    //     this.offset = length;\r\n\r\n    //     return data;\r\n    // }\r\n\r\n    /**\r\n     * 获取当前录音的波形数据，\r\n     * 调取频率由外部控制。\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData(): any {\r\n        return this.getAnalyseData();\r\n    }\r\n\r\n    /**\r\n     * 获取录音播放时的波形数据，\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData(): any {\r\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\r\n        return Player.getAnalyseData();\r\n    }\r\n\r\n    getPCM(): any {\r\n        // 先停止\r\n        this.stop();\r\n        // 获取pcm数据\r\n        let data: any = this.getData();\r\n        // 根据输入输出比例 压缩或扩展\r\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob(): any {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        let pcmBlob = this.getPCMBlob();\r\n\r\n        downloadPCM(pcmBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAV(): any {\r\n        let pcmTemp = this.getPCM();\r\n\r\n        // PCM增加44字节的头就是WAV格式了\r\n        return encodeWAV(pcmTemp, this.inputSampleRate,\r\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\r\n    }\r\n\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob(): any {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        let wavBlob = this.getWAVBlob();\r\n\r\n        downloadWAV(wavBlob, name);\r\n    }\r\n\r\n    /**\r\n     * 通用的下载接口\r\n     */\r\n    download(blob, name: string, type: string): void {\r\n        download(blob, name, type);\r\n    }\r\n\r\n    /**\r\n     * 获取左和右声道的数据\r\n     *\r\n     * @returns [DataView]\r\n     */\r\n    getChannelData(): any {\r\n        const all = this.getPCM();\r\n        const length = all.byteLength;\r\n        const littleEdian = this.littleEdian\r\n        const res = { left: null, right: null }\r\n\r\n        if (this.config.numChannels === 2) {\r\n            // 双通道,劈开\r\n            const lD = new DataView(new ArrayBuffer(length / 2))\r\n            const rD = new DataView(new ArrayBuffer(length / 2))\r\n            // 双声道，需要拆分下数据\r\n\r\n            if (this.config.sampleBits === 16) {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt16(i, all.getInt16(i * 2, littleEdian), littleEdian)\r\n                    rD.setInt16(i, all.getInt16(i * 2 + 2, littleEdian), littleEdian)\r\n                }\r\n            } else {\r\n                for (var i = 0; i < length / 2; i += 2) {\r\n                    lD.setInt8(i, all.getInt8(i * 2))\r\n                    rD.setInt8(i, all.getInt8(i * 2 + 1))\r\n                }\r\n            }\r\n\r\n            res.left = lD\r\n            res.right = rD\r\n        } else {\r\n            // 单通道\r\n            res.left = all\r\n        }\r\n\r\n        return res\r\n    }\r\n}\r\n\r\nexport default Index;\r\n","/**\r\n * 下载录音文件\r\n * @private\r\n * @param {*} blob      blob数据\r\n * @param {string} name 下载的文件名\r\n * @param {string} type 下载的文件后缀\r\n */\r\nfunction _download(blob, name: string, type: string): void {\r\n    let oA = document.createElement('a');\r\n\r\n    oA.href = window.URL.createObjectURL(blob);\r\n    oA.download = `${ name }.${ type }`;\r\n    oA.click();\r\n}\r\n\r\n/**\r\n * 下载录音的wav数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n */\r\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\r\n    _download(wavblob, name, 'wav');\r\n}\r\n\r\n/**\r\n * 下载录音pcm数据\r\n *\r\n * @param {blob}   需要下载的blob数据类型\r\n * @param {string} [name='recorder']    重命名的名字\r\n * @memberof Recorder\r\n */\r\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\r\n    _download(pcmBlob, name, 'pcm');\r\n}\r\n\r\n// 通用下载接口\r\nexport function download(blob, name: string, type: string) {\r\n    return _download(blob, name, type)\r\n}\r\n","import { throwError } from '../exception/exception'\r\n\r\ndeclare let window: any;\r\n\r\nlet source: any = null;\r\nlet playTime: number = 0;       // 相对时间，记录暂停位置\r\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\r\nlet context: any = null;\r\nlet analyser: any = null;\r\n\r\nlet audioData: any = null;\r\n// let hasInit: boolean = false;           // 是否已经初始化了\r\nlet isPaused: boolean = false;\r\nlet totalTime: number = 0;\r\nlet endplayFn: any = function() {};\r\n\r\n/**\r\n * 初始化\r\n */\r\nfunction init(): void {\r\n    context = new (window.AudioContext || window.webkitAudioContext)();\r\n    analyser = context.createAnalyser();\r\n    analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n}\r\n\r\n/**\r\n * play\r\n * @returns {Promise<{}>}\r\n */\r\nfunction playAudio(): Promise<{}> {\r\n    isPaused = false;\r\n\r\n    return context.decodeAudioData(audioData.slice(0), buffer => {\r\n        source = context.createBufferSource();\r\n\r\n        // 播放结束的事件绑定\r\n        source.onended = () => {\r\n            if (!isPaused) {  // 暂停的时候也会触发该事件\r\n                // 计算音频总时长\r\n                totalTime = context.currentTime - playStamp + playTime;\r\n                endplayFn();\r\n            }\r\n\r\n        }\r\n\r\n        // 设置数据\r\n        source.buffer = buffer;\r\n        // connect到分析器，还是用录音的，因为播放时不能录音的\r\n        source.connect(analyser);\r\n        analyser.connect(context.destination);\r\n        source.start(0, playTime);\r\n\r\n        // 记录当前的时间戳，以备暂停时使用\r\n        playStamp = context.currentTime;\r\n    }, function(e) {\r\n        throwError(e);\r\n    });\r\n}\r\n\r\n// 销毁source, 由于 decodeAudioData 产生的source每次停止后就不能使用，所以暂停也意味着销毁，下次需重新启动。\r\nfunction destroySource() {\r\n    if (source) {\r\n        source.stop();\r\n        source = null;\r\n    }\r\n}\r\n\r\nexport default class Player {\r\n    /**\r\n     * play record\r\n     * @static\r\n     * @param {ArrayBuffer} arraybuffer\r\n     * @memberof Player\r\n     */\r\n    static play(arraybuffer): Promise<{}> {\r\n        if (!context) {\r\n            // 第一次播放要初始化\r\n            init();\r\n        }\r\n        this.stopPlay();\r\n        // 缓存播放数据\r\n        audioData = arraybuffer;\r\n        totalTime = 0;\r\n\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 暂停播放录音\r\n     * @memberof Player\r\n     */\r\n    static pausePlay(): void {\r\n        destroySource();\r\n        // 多次暂停需要累加\r\n        playTime += context.currentTime - playStamp;\r\n        isPaused = true;\r\n    }\r\n\r\n    /**\r\n     * 恢复播放录音\r\n     * @memberof Player\r\n     */\r\n    static resumePlay(): Promise<{}> {\r\n        return playAudio();\r\n    }\r\n\r\n    /**\r\n     * 停止播放\r\n     * @memberof Player\r\n     */\r\n    static stopPlay() {\r\n        playTime = 0;\r\n        audioData = null;\r\n\r\n        destroySource();\r\n    }\r\n\r\n    static destroyPlay() {\r\n        this.stopPlay();\r\n    }\r\n\r\n    static getAnalyseData() {\r\n        let dataArray = new Uint8Array(analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     * 增加录音播放完成的事件绑定\r\n     *\r\n     * @static\r\n     * @param {*} [fn=function() {}]\r\n     * @memberof Player\r\n     */\r\n    static addPlayEnd(fn: any = function() {}) {\r\n        endplayFn = fn;\r\n    }\r\n\r\n    // 获取已经播放的时长\r\n    static getPlayTime(): number {\r\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\r\n\r\n        return totalTime || pTime;\r\n    }\r\n}\r\n","/**\r\n * 异常处理\r\n * @static\r\n * @param {*} message   错误消息\r\n */\r\nexport function throwError(message: string) {\r\n    throw new Error(message);\r\n}\r\n","import { compress, encodePCM, encodeWAV } from '../transform/transform';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,        // 采样位数\r\n    sampleRate?: number,        // 采样率\r\n    numChannels?: number,       // 声道数\r\n    compiling?: boolean,        // 是否边录边播\r\n}\r\n\r\nexport default class Recorder {\r\n    private context: any;\r\n    protected config: recorderConfig;               // 配置\r\n    private analyser: any;\r\n    private size: number = 0;                       // 录音文件总长度\r\n    private lBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(左声道)\r\n    private rBuffer: Array<Float32Array> = [];      // pcm音频数据搜集器(右声道)\r\n    private PCM: any;                               // 最终的PCM数据缓存，避免多次encode\r\n    private tempPCM: Array<DataView> = [];          // 边录边转时临时存放pcm的\r\n    private audioInput: any;\r\n    protected inputSampleRate: number;              // 输入采样率\r\n    protected inputSampleBits: number = 16;         // 输入采样位数\r\n    protected outputSampleRate: number;             // 输出采样率\r\n    protected oututSampleBits: number;              // 输出采样位数\r\n    private source: any;                            // 音频输入\r\n    private recorder: any;\r\n    private stream: any;                            // 流\r\n    protected littleEdian: boolean;                 // 是否是小端字节序\r\n    protected fileSize: number = 0;                 // 录音大小，byte为单位\r\n    protected duration: number = 0;                 // 录音时长\r\n    private needRecord: boolean = true;             // 由于safari问题，导致使用该方案代替disconnect/connect方案\r\n    // 正在录音时间，参数是已经录了多少时间了\r\n    public onprocess: (duration: number) => void;\r\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\r\n    public onprogress: (payload: {\r\n        duration: number,\r\n        fileSize: number,\r\n        vol: number,\r\n        // data: Array<DataView>,      // 当前存储的所有录音数据\r\n    }) => void;\r\n    public onplay: () => void;                  // 音频播放回调\r\n    public onpauseplay: () => void;             // 音频暂停回调\r\n    public onresumeplay: () => void;            // 音频恢复播放回调\r\n    public onstopplay: () => void;              // 音频停止播放回调\r\n    public onplayend: () => void;               // 音频正常播放结束\r\n\r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // 临时audioContext，为了获取输入采样率的\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\r\n\r\n        // 设置输出配置\r\n        this.setNewOption(options);\r\n\r\n        // 判断端字节序\r\n        this.littleEdian = (function() {\r\n            let buffer = new ArrayBuffer(2);\r\n            new DataView(buffer).setInt16(0, 256, true);\r\n            return new Int16Array(buffer)[0] === 256;\r\n        })();\r\n        // 兼容 getUserMedia\r\n        Recorder.initUserMedia();\r\n    }\r\n\r\n    protected setNewOption(options: recorderConfig = {}) {\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[8000, 11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n            // 是否需要边录边转，默认关闭，后期使用web worker\r\n            // compiling: !!options.compiling || false,   // 先移除\r\n        };\r\n        // 设置采样的参数\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {Promise<{}>}\r\n     * @memberof Recorder\r\n     */\r\n    startRecord(): Promise<{}> {\r\n        if (this.context) {\r\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\r\n            this.destroyRecord();\r\n        }\r\n        // 初始化\r\n        this.initRecorder();\r\n\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        }).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n            this.stream = stream;\r\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\r\n            , error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        } */).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // this.audioInput.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pauseRecord(): void {\r\n        this.needRecord = false;\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resumeRecord(): void {\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     */\r\n    stopRecord(): void {\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.source && this.source.stop();\r\n        this.recorder.disconnect();\r\n        this.analyser.disconnect();\r\n        this.needRecord = true;\r\n    }\r\n\r\n    /**\r\n     * 销毁录音对象\r\n     *\r\n     */\r\n    destroyRecord(): Promise<{}> {\r\n        this.clearRecordStatus();\r\n        // 结束流\r\n        this.stopStream();\r\n\r\n        return this.closeAudioContext();\r\n    }\r\n\r\n    getAnalyseData() {\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    // 获取录音数据\r\n    getData() {\r\n        let data: any = this.flat();\r\n\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 清除状态\r\n     *\r\n     */\r\n    private clearRecordStatus() {\r\n        this.lBuffer.length = 0;\r\n        this.rBuffer.length = 0;\r\n        this.size = 0;\r\n        this.fileSize = 0;\r\n        this.PCM = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n    }\r\n\r\n    /**\r\n     * 将二维数组转一维\r\n     *\r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        let lData = null,\r\n            rData = new Float32Array(0);    // 右声道默认为0\r\n\r\n        // 创建存放数据的容器\r\n        if (1 === this.config.numChannels) {\r\n            lData = new Float32Array(this.size);\r\n        } else {\r\n            lData = new Float32Array(this.size / 2);\r\n            rData = new Float32Array(this.size / 2);\r\n        }\r\n        // 合并\r\n        let offset = 0; // 偏移量计算\r\n\r\n        // 将二维数据，转成一维数据\r\n        // 左声道\r\n        for (let i = 0; i < this.lBuffer.length; i++) {\r\n            lData.set(this.lBuffer[i], offset);\r\n            offset += this.lBuffer[i].length;\r\n        }\r\n\r\n        offset = 0;\r\n        // 右声道\r\n        for (let i = 0; i < this.rBuffer.length; i++) {\r\n            rData.set(this.rBuffer[i], offset);\r\n            offset += this.rBuffer[i].length;\r\n        }\r\n\r\n        return {\r\n            left: lData,\r\n            right: rData\r\n        };\r\n    }\r\n\r\n    /**\r\n     * 初始化录音实例\r\n     */\r\n    private initRecorder(): void {\r\n        // 清空数据\r\n        this.clearRecordStatus();\r\n\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n\r\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\r\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            if (!this.needRecord) {\r\n                return;\r\n            }\r\n            // 左声道数据\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            let lData = e.inputBuffer.getChannelData(0),\r\n                rData = null,\r\n                vol = 0;        // 音量百分比\r\n\r\n            this.lBuffer.push(new Float32Array(lData));\r\n\r\n            this.size += lData.length;\r\n\r\n            // 判断是否有右声道数据\r\n            if (2 === this.config.numChannels) {\r\n                rData = e.inputBuffer.getChannelData(1);\r\n                this.rBuffer.push(new Float32Array(rData));\r\n\r\n                this.size += rData.length;\r\n            }\r\n\r\n            // 边录边转处理 暂时不支持\r\n            // if (this.config.compiling) {\r\n            //     let pcm = this.transformIntoPCM(lData, rData);\r\n\r\n            //     this.tempPCM.push(pcm);\r\n            //     // 计算录音大小\r\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\r\n            // } else {\r\n                // 计算录音大小\r\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\r\n                    * (this.oututSampleBits / 8)\r\n            // }\r\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\r\n            // 有小数位的偏差。\r\n\r\n            // 计算音量百分比\r\n            vol = Math.max.apply(Math, lData) * 100;\r\n            // 统计录音时长\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // 录音时长回调\r\n            this.onprocess && this.onprocess(this.duration);\r\n            // 录音时长及响度回调\r\n            this.onprogress && this.onprogress({\r\n                duration: this.duration,\r\n                fileSize: this.fileSize,\r\n                vol,\r\n                // data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private stopStream() {\r\n        if (this.stream && this.stream.getTracks) {\r\n            this.stream.getTracks().forEach(track => track.stop());\r\n            this.stream = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * close兼容方案\r\n     * 如firefox 30 等低版本浏览器没有 close方法\r\n     */\r\n    private closeAudioContext() {\r\n        if (this.context && this.context.close && this.context.state !== 'closed') {\r\n            return this.context.close();\r\n        } else {\r\n            return new Promise((resolve) => {\r\n                resolve();\r\n            });\r\n        }\r\n    }\r\n\r\n    // getUserMedia 版本兼容\r\n    static initUserMedia() {\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n\r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\r\n                }\r\n\r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 将获取到到左右声道的Float32Array数据编码转化\r\n     *\r\n     * @param {Float32Array} lData  左声道数据\r\n     * @param {Float32Array} rData  有声道数据\r\n     * @returns DataView\r\n     */\r\n    private transformIntoPCM(lData, rData) {\r\n        let lBuffer = new Float32Array(lData),\r\n            rBuffer = new Float32Array(rData);\r\n\r\n        let data = compress({\r\n            left: lBuffer,\r\n            right: rBuffer,\r\n        }, this.inputSampleRate, this.outputSampleRate);\r\n\r\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\r\n    }\r\n\r\n    static getPermission(): Promise<{}> {\r\n        this.initUserMedia();\r\n\r\n        return navigator.mediaDevices.getUserMedia({audio: true}).then((stream) => {\r\n            stream && stream.getTracks().forEach(track => track.stop());\r\n        });\r\n    }\r\n}\r\n","module.exports = require(\"./dist/recorder.js\");\r\n"],"names":["render","_vm","this","_c","_self","directives","name","rawName","value","mode","expression","staticClass","_v","_s","stateTip","state","parseInt","rc","duration","ref","attrs","url","on","$event","onStopAudio","onStartRecord","onPauseRecord","onResumeRecord","onCompleteRecord","onPlayAudio","onRestartRecord","onSendRecord","staticRenderFns","props","data","Recorder","audio","Audio","methods","onClose","destroy","pause","$emit","start","then","stream","catch","error","$message","resume","wav","getWAVBlob","URL","createObjectURL","$refs","src","play","Date","getDate","formData","window","FormData","append","$http","method","headers","component","t","e","module","exports","n","i","o","l","call","m","c","d","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","__esModule","create","bind","default","prototype","hasOwnProperty","p","s","length","setUint8","charCodeAt","compress","Math","max","left","a","right","floor","u","Float32Array","f","encodePCM","ArrayBuffer","DataView","min","setInt8","setInt16","encodeWAV","byteLength","setUint32","setUint16","getUint8","__extends","setPrototypeOf","__proto__","Array","constructor","isrecording","ispause","isplaying","setOption","setNewOption","Promise","reject","startRecord","pauseRecord","resumeRecord","stop","stopRecord","onplay","addPlayEnd","onplayend","getWAV","buffer","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroyPlay","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","inputSampleRate","outputSampleRate","oututSampleBits","littleEdian","getPCMBlob","Blob","downloadPCM","config","numChannels","type","downloadWAV","download","getChannelData","sampleBits","getInt16","getInt8","document","createElement","href","click","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","throwError","h","y","AudioContext","webkitAudioContext","createAnalyser","fftSize","Uint8Array","frequencyBinCount","getByteTimeDomainData","Error","size","lBuffer","rBuffer","tempPCM","inputSampleBits","fileSize","needRecord","sampleRate","Int16Array","initUserMedia","indexOf","context","initRecorder","navigator","mediaDevices","getUserMedia","audioInput","createMediaStreamSource","analyser","recorder","disconnect","source","clearRecordStatus","stopStream","closeAudioContext","flat","PCM","set","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","inputBuffer","push","onprocess","onprogress","vol","getTracks","forEach","close","webkitGetUserMedia","mozGetUserMedia","transformIntoPCM","getPermission"],"sourceRoot":""}